{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"approxKD","text":"<p>This package is meant to find the approximate nearest neighbors using KD-Trees</p> <ul> <li>PYPI link for this package - approxKD</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>installation steps</p> <p>First let's do an easy pip installation of the library by running the following command - <pre><code>pip install approxKD\n</code></pre></p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Quick start</p> <p>First let's import the library - <pre><code>        # importing the library\n        from approxKD.ann import KDTreeANN\n</code></pre></p> <p>Now create an instance of KDTreeANN and build the KD-Trees using the build_kdtrees method <pre><code>        # creating an instance\n        kdtree_ann = KDTreeANN(min_subset_size=10, n_trees=5)\n\n        # building KD-trees\n        vectors = [np.array([1, 2]), np.array([3, 4]), np.array([5, 6])]\n        trees = kdtree_ann.build_kdtrees(vectors)\n</code></pre></p> <ol> <li> <p>Finding the approximate neighbors using the get_approximate_neighbors method <pre><code>       # find approximate neighbors\n       query_vector = np.array([2, 3])\n       approx_neighbors = kdtree_ann.get_approximate_neighbors(query_vector, trees)\n</code></pre></p> </li> <li> <p>Finding the approximate nearest neighbors  using the get_approximate_nearest_neighbors method <pre><code>       # getting the 2 nearest neighbors from approximate neighbors\n       query_vector = np.array([2, 3])\n       approx_nearest_neighbors = kdtree_ann.get_approximate_nearest_neighbors(query_vector, trees, k=2, metric=\"euclidean\")\n</code></pre></p> </li> </ol>"},{"location":"APIreference/","title":"API reference","text":""},{"location":"APIreference/#defining-the-kdtreeann-instance","title":"Defining the KDTreeANN instance","text":"example Args Type Description min_subset_size int minimum number of vectors to be in a node (if the number of vectors in a node is lesser than or equal to min_subset_size then the node will not be splitted further ) n_trees int number of KD-Trees to build"},{"location":"APIreference/#short-example","title":"Short example","text":"<pre><code># importing the library\nfrom approxKD.ann import KDTreeANN\n\n# creating an instance of KDTreeANN\nkdtree_ann = KDTreeANN(min_subset_size=10, n_trees=5)\n</code></pre>"},{"location":"APIreference/#building-the-kd-tree","title":"Building the KD-Tree","text":"example Args Type Description vectors list list of the vectors Returns Type Description trees list list of KD-Tree objects"},{"location":"APIreference/#short-example_1","title":"Short example","text":"<pre><code># building kd-trees\ntrees = kdtree_ann.build_kdtrees(vectors)\n</code></pre>"},{"location":"APIreference/#finding-approximate-neighbors","title":"Finding Approximate Neighbors","text":"example Args Type Description query_vector np.ndarray query vector whose neighbor we want to find trees list list of KD-Tree objects Returns Type Description neighbors list List of approximate neighbors (np.ndarray)"},{"location":"APIreference/#short-example_2","title":"Short example","text":"<pre><code># finding the approximate neighbors\napprox_neighbors = kdtree_ann.get_approximate_neighbors(query_vector, trees)\n</code></pre>"},{"location":"APIreference/#finding-approximate-nearest-neighbors","title":"Finding Approximate Nearest Neighbors","text":"example Args Type Description query_vector np.ndarray query vector whose neighbor we want to find trees list list of KD-Tree objects k int number of nearest neighbors to find metric str distance metric to use (\"cosine\",\"eucledian\",\"manhattan\") default is \"cosine\" Returns Type Description neighbors list List of (np.ndarrays) approximate nearest neighbors (np.ndarrays)"},{"location":"APIreference/#short-example_3","title":"Short example","text":"<pre><code>    # get approximate nearest neighbors\n    approx_nearest_neighbors = kdtree_ann.get_approximate_nearest_neighbors(query_vector, trees, k=2, metric=\"euclidean\")\n</code></pre>"}]}